// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Vagkl\Documents\go-projects\spamhaus\db\repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "assignment/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockURLRequestInterface is a mock of URLRequestInterface interface.
type MockURLRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockURLRequestInterfaceMockRecorder
}

// MockURLRequestInterfaceMockRecorder is the mock recorder for MockURLRequestInterface.
type MockURLRequestInterfaceMockRecorder struct {
	mock *MockURLRequestInterface
}

// NewMockURLRequestInterface creates a new mock instance.
func NewMockURLRequestInterface(ctrl *gomock.Controller) *MockURLRequestInterface {
	mock := &MockURLRequestInterface{ctrl: ctrl}
	mock.recorder = &MockURLRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRequestInterface) EXPECT() *MockURLRequestInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockURLRequestInterface) Delete(d domain.URLEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockURLRequestInterfaceMockRecorder) Delete(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockURLRequestInterface)(nil).Delete), d)
}

// GetByDate mocks base method.
func (m *MockURLRequestInterface) GetByDate() ([]domain.URLEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDate")
	ret0, _ := ret[0].([]domain.URLEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDate indicates an expected call of GetByDate.
func (mr *MockURLRequestInterfaceMockRecorder) GetByDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDate", reflect.TypeOf((*MockURLRequestInterface)(nil).GetByDate))
}

// GetBySize mocks base method.
func (m *MockURLRequestInterface) GetBySize() ([]domain.URLEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySize")
	ret0, _ := ret[0].([]domain.URLEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySize indicates an expected call of GetBySize.
func (mr *MockURLRequestInterfaceMockRecorder) GetBySize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySize", reflect.TypeOf((*MockURLRequestInterface)(nil).GetBySize))
}

// GetMostSubmitted mocks base method.
func (m *MockURLRequestInterface) GetMostSubmitted() ([]domain.URLEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostSubmitted")
	ret0, _ := ret[0].([]domain.URLEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostSubmitted indicates an expected call of GetMostSubmitted.
func (mr *MockURLRequestInterfaceMockRecorder) GetMostSubmitted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostSubmitted", reflect.TypeOf((*MockURLRequestInterface)(nil).GetMostSubmitted))
}

// Update mocks base method.
func (m *MockURLRequestInterface) Update(d domain.URLEntry) (*domain.URLEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", d)
	ret0, _ := ret[0].(*domain.URLEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockURLRequestInterfaceMockRecorder) Update(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockURLRequestInterface)(nil).Update), d)
}
